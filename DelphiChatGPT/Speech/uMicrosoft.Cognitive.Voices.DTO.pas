unit uMicrosoft.Cognitive.Voices.DTO;

//  *************************************************
//    Generated By: JsonToDelphiClass - 0.65
//    Project link: https://github.com/PKGeorgiev/Delphi-JsonToDelphiClass
//    Generated On: 2023-02-08 17:34:22
//  *************************************************
//    Created By  : Petar Georgiev - 2014
//    WebSite     : http://pgeorgiev.com
//  *************************************************

interface

uses Generics.Collections, Rest.Json;

type

  TExtendedPropertyMapClass = class
  private
    FIsHighQuality48K: String;
  public
    property IsHighQuality48K: String read FIsHighQuality48K write FIsHighQuality48K;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TExtendedPropertyMapClass;
  end;

  TItemClass = class
  private
    FDisplayName: String;
    FExtendedPropertyMap: TExtendedPropertyMapClass;
    FGender: String;
    FLocalName: String;
    FLocale: String;
    FLocaleName: String;
    FName: String;
    FSampleRateHertz: String;
    FShortName: String;
    FStatus: String;
    FStyleList: TArray<String>;
    FVoiceType: String;
    FWordsPerMinute: String;
  public
    property DisplayName: String read FDisplayName write FDisplayName;
    property ExtendedPropertyMap: TExtendedPropertyMapClass read FExtendedPropertyMap write FExtendedPropertyMap;
    property Gender: String read FGender write FGender;
    property LocalName: String read FLocalName write FLocalName;
    property Locale: String read FLocale write FLocale;
    property LocaleName: String read FLocaleName write FLocaleName;
    property Name: String read FName write FName;
    property SampleRateHertz: String read FSampleRateHertz write FSampleRateHertz;
    property ShortName: String read FShortName write FShortName;
    property Status: String read FStatus write FStatus;
    property StyleList: TArray<String> read FStyleList write FStyleList;
    property VoiceType: String read FVoiceType write FVoiceType;
    property WordsPerMinute: String read FWordsPerMinute write FWordsPerMinute;
    constructor Create;
    destructor Destroy; override;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TItemClass;
  end;

  TMicrosoftCognitiveVoicesClass = class
  private
    FItems: TArray<TItemClass>;
  public
    property Items: TArray<TItemClass> read FItems write FItems;
    destructor Destroy; override;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TMicrosoftCognitiveVoicesClass;
  end;

implementation

{TExtendedPropertyMapClass}


function TExtendedPropertyMapClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TExtendedPropertyMapClass.FromJsonString(AJsonString: string): TExtendedPropertyMapClass;
begin
  result := TJson.JsonToObject<TExtendedPropertyMapClass>(AJsonString)
end;

{TItemClass}

constructor TItemClass.Create;
begin
  inherited;
  FExtendedPropertyMap := TExtendedPropertyMapClass.Create();
end;

destructor TItemClass.Destroy;
begin
  FExtendedPropertyMap.free;
  inherited;
end;

function TItemClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TItemClass.FromJsonString(AJsonString: string): TItemClass;
begin
  result := TJson.JsonToObject<TItemClass>(AJsonString)
end;

{TRootClass}

destructor TMicrosoftCognitiveVoicesClass.Destroy;
var
  LItemsItem: TItemClass;
begin

 for LItemsItem in FItems do
   LItemsItem.free;

  inherited;
end;

function TMicrosoftCognitiveVoicesClass.ToJsonString: string;
begin
  result := TJson.ObjectToJsonString(self);
end;

class function TMicrosoftCognitiveVoicesClass.FromJsonString(AJsonString: string): TMicrosoftCognitiveVoicesClass;
begin
  result := TJson.JsonToObject<TMicrosoftCognitiveVoicesClass>(AJsonString)
end;

end.

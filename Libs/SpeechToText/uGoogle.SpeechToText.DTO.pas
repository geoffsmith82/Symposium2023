unit uGoogle.SpeechToText.DTO;

//  *************************************************
//    Generated By: JsonToDelphiClass - 0.65
//    Project link: https://github.com/PKGeorgiev/Delphi-JsonToDelphiClass
//    Generated On: 2023-03-29 17:37:27
//  *************************************************
//    Created By  : Petar Georgiev - 2014
//    WebSite     : http://pgeorgiev.com
//  *************************************************

interface

uses Generics.Collections, Rest.Json;

type

  TAlternativesClass = class
  private
    FConfidence: Extended;
    FTranscript: String;
  public
    property confidence: Extended read FConfidence write FConfidence;
    property transcript: String read FTranscript write FTranscript;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TAlternativesClass;
  end;

  TResultsClass = class
  private
    FAlternatives: TArray<TAlternativesClass>;
    FLanguageCode: String;
    FResultEndTime: String;
  public
    property alternatives: TArray<TAlternativesClass> read FAlternatives write FAlternatives;
    property languageCode: String read FLanguageCode write FLanguageCode;
    property resultEndTime: String read FResultEndTime write FResultEndTime;
    destructor Destroy; override;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TResultsClass;
  end;

  TTGoogleSpeechToTextResultsClass = class
  private
    FRequestId: String;
    FResults: TArray<TResultsClass>;
    FTotalBilledTime: String;
  public
    property requestId: String read FRequestId write FRequestId;
    property results: TArray<TResultsClass> read FResults write FResults;
    property totalBilledTime: String read FTotalBilledTime write FTotalBilledTime;
    destructor Destroy; override;
    function ToJsonString: string;
    class function FromJsonString(AJsonString: string): TTGoogleSpeechToTextResultsClass;
  end;

implementation

{TAlternativesClass}


function TAlternativesClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TAlternativesClass.FromJsonString(AJsonString: string): TAlternativesClass;
begin
  result := TJson.JsonToObject<TAlternativesClass>(AJsonString)
end;

{TResultsClass}

destructor TResultsClass.Destroy;
var
  LalternativesItem: TAlternativesClass;
begin

 for LalternativesItem in FAlternatives do
   LalternativesItem.free;

  inherited;
end;

function TResultsClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TResultsClass.FromJsonString(AJsonString: string): TResultsClass;
begin
  result := TJson.JsonToObject<TResultsClass>(AJsonString)
end;

{TTGoogleSpeechToTextResultsClass}

destructor TTGoogleSpeechToTextResultsClass.Destroy;
var
  LresultsItem: TResultsClass;
begin

 for LresultsItem in FResults do
   LresultsItem.free;

  inherited;
end;

function TTGoogleSpeechToTextResultsClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TTGoogleSpeechToTextResultsClass.FromJsonString(AJsonString: string): TTGoogleSpeechToTextResultsClass;
begin
  result := TJson.JsonToObject<TTGoogleSpeechToTextResultsClass>(AJsonString)
end;

end.

unit uMicrosoft.FaceRecognition.DTO;

//  *************************************************
//    Generated By: JsonToDelphiClass - 0.65
//    Project link: https://github.com/PKGeorgiev/Delphi-JsonToDelphiClass
//    Generated On: 2023-04-22 21:49:15
//  *************************************************
//    Created By  : Petar Georgiev - 2014
//    WebSite     : http://pgeorgiev.com
//  *************************************************

interface

uses Generics.Collections, Rest.Json, JSON;

type

  TUnderLipBottomClass = class
  private
    FX: Extended;
    FY: Extended;
  public
    property x: Extended read FX write FX;
    property y: Extended read FY write FY;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TUnderLipBottomClass;
  end;

  TUnderLipTopClass = class
  private
    FX: Extended;
    FY: Extended;
  public
    property x: Extended read FX write FX;
    property y: Extended read FY write FY;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TUnderLipTopClass;
  end;

  TUpperLipBottomClass = class
  private
    FX: Extended;
    FY: Extended;
  public
    property x: Extended read FX write FX;
    property y: Extended read FY write FY;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TUpperLipBottomClass;
  end;

  TUpperLipTopClass = class
  private
    FX: Extended;
    FY: Extended;
  public
    property x: Extended read FX write FX;
    property y: Extended read FY write FY;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TUpperLipTopClass;
  end;

  TNoseRightAlarOutTipClass = class
  private
    FX: Extended;
    FY: Extended;
  public
    property x: Extended read FX write FX;
    property y: Extended read FY write FY;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TNoseRightAlarOutTipClass;
  end;

  TNoseLeftAlarOutTipClass = class
  private
    FX: Extended;
    FY: Extended;
  public
    property x: Extended read FX write FX;
    property y: Extended read FY write FY;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TNoseLeftAlarOutTipClass;
  end;

  TNoseRightAlarTopClass = class
  private
    FX: Extended;
    FY: Extended;
  public
    property x: Extended read FX write FX;
    property y: Extended read FY write FY;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TNoseRightAlarTopClass;
  end;

  TNoseLeftAlarTopClass = class
  private
    FX: Extended;
    FY: Extended;
  public
    property x: Extended read FX write FX;
    property y: Extended read FY write FY;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TNoseLeftAlarTopClass;
  end;

  TNoseRootRightClass = class
  private
    FX: Extended;
    FY: Extended;
  public
    property x: Extended read FX write FX;
    property y: Extended read FY write FY;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TNoseRootRightClass;
  end;

  TNoseRootLeftClass = class
  private
    FX: Extended;
    FY: Extended;
  public
    property x: Extended read FX write FX;
    property y: Extended read FY write FY;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TNoseRootLeftClass;
  end;

  TEyeRightOuterClass = class
  private
    FX: Extended;
    FY: Extended;
  public
    property x: Extended read FX write FX;
    property y: Extended read FY write FY;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TEyeRightOuterClass;
  end;

  TEyeRightBottomClass = class
  private
    FX: Extended;
    FY: Extended;
  public
    property x: Extended read FX write FX;
    property y: Extended read FY write FY;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TEyeRightBottomClass;
  end;

  TEyeRightTopClass = class
  private
    FX: Extended;
    FY: Extended;
  public
    property x: Extended read FX write FX;
    property y: Extended read FY write FY;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TEyeRightTopClass;
  end;

  TEyeRightInnerClass = class
  private
    FX: Extended;
    FY: Extended;
  public
    property x: Extended read FX write FX;
    property y: Extended read FY write FY;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TEyeRightInnerClass;
  end;

  TEyebrowRightOuterClass = class
  private
    FX: Extended;
    FY: Extended;
  public
    property x: Extended read FX write FX;
    property y: Extended read FY write FY;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TEyebrowRightOuterClass;
  end;

  TEyebrowRightInnerClass = class
  private
    FX: Extended;
    FY: Extended;
  public
    property x: Extended read FX write FX;
    property y: Extended read FY write FY;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TEyebrowRightInnerClass;
  end;

  TEyeLeftInnerClass = class
  private
    FX: Extended;
    FY: Extended;
  public
    property x: Extended read FX write FX;
    property y: Extended read FY write FY;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TEyeLeftInnerClass;
  end;

  TEyeLeftBottomClass = class
  private
    FX: Extended;
    FY: Extended;
  public
    property x: Extended read FX write FX;
    property y: Extended read FY write FY;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TEyeLeftBottomClass;
  end;

  TEyeLeftTopClass = class
  private
    FX: Extended;
    FY: Extended;
  public
    property x: Extended read FX write FX;
    property y: Extended read FY write FY;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TEyeLeftTopClass;
  end;

  TEyeLeftOuterClass = class
  private
    FX: Extended;
    FY: Extended;
  public
    property x: Extended read FX write FX;
    property y: Extended read FY write FY;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TEyeLeftOuterClass;
  end;

  TEyebrowLeftInnerClass = class
  private
    FX: Extended;
    FY: Extended;
  public
    property x: Extended read FX write FX;
    property y: Extended read FY write FY;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TEyebrowLeftInnerClass;
  end;

  TEyebrowLeftOuterClass = class
  private
    FX: Extended;
    FY: Extended;
  public
    property x: Extended read FX write FX;
    property y: Extended read FY write FY;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TEyebrowLeftOuterClass;
  end;

  TMouthRightClass = class
  private
    FX: Extended;
    FY: Extended;
  public
    property x: Extended read FX write FX;
    property y: Extended read FY write FY;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TMouthRightClass;
  end;

  TMouthLeftClass = class
  private
    FX: Extended;
    FY: Extended;
  public
    property x: Extended read FX write FX;
    property y: Extended read FY write FY;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TMouthLeftClass;
  end;

  TNoseTipClass = class
  private
    FX: Extended;
    FY: Extended;
  public
    property x: Extended read FX write FX;
    property y: Extended read FY write FY;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TNoseTipClass;
  end;

  TPupilRightClass = class
  private
    FX: Extended;
    FY: Extended;
  public
    property x: Extended read FX write FX;
    property y: Extended read FY write FY;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TPupilRightClass;
  end;

  TPupilLeftClass = class
  private
    FX: Extended;
    FY: Extended;
  public
    property x: Extended read FX write FX;
    property y: Extended read FY write FY;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TPupilLeftClass;
  end;

  TFaceLandmarksClass = class
  private
    FEyeLeftBottom: TEyeLeftBottomClass;
    FEyeLeftInner: TEyeLeftInnerClass;
    FEyeLeftOuter: TEyeLeftOuterClass;
    FEyeLeftTop: TEyeLeftTopClass;
    FEyeRightBottom: TEyeRightBottomClass;
    FEyeRightInner: TEyeRightInnerClass;
    FEyeRightOuter: TEyeRightOuterClass;
    FEyeRightTop: TEyeRightTopClass;
    FEyebrowLeftInner: TEyebrowLeftInnerClass;
    FEyebrowLeftOuter: TEyebrowLeftOuterClass;
    FEyebrowRightInner: TEyebrowRightInnerClass;
    FEyebrowRightOuter: TEyebrowRightOuterClass;
    FMouthLeft: TMouthLeftClass;
    FMouthRight: TMouthRightClass;
    FNoseLeftAlarOutTip: TNoseLeftAlarOutTipClass;
    FNoseLeftAlarTop: TNoseLeftAlarTopClass;
    FNoseRightAlarOutTip: TNoseRightAlarOutTipClass;
    FNoseRightAlarTop: TNoseRightAlarTopClass;
    FNoseRootLeft: TNoseRootLeftClass;
    FNoseRootRight: TNoseRootRightClass;
    FNoseTip: TNoseTipClass;
    FPupilLeft: TPupilLeftClass;
    FPupilRight: TPupilRightClass;
    FUnderLipBottom: TUnderLipBottomClass;
    FUnderLipTop: TUnderLipTopClass;
    FUpperLipBottom: TUpperLipBottomClass;
    FUpperLipTop: TUpperLipTopClass;
  public
    property eyeLeftBottom: TEyeLeftBottomClass read FEyeLeftBottom write FEyeLeftBottom;
    property eyeLeftInner: TEyeLeftInnerClass read FEyeLeftInner write FEyeLeftInner;
    property eyeLeftOuter: TEyeLeftOuterClass read FEyeLeftOuter write FEyeLeftOuter;
    property eyeLeftTop: TEyeLeftTopClass read FEyeLeftTop write FEyeLeftTop;
    property eyeRightBottom: TEyeRightBottomClass read FEyeRightBottom write FEyeRightBottom;
    property eyeRightInner: TEyeRightInnerClass read FEyeRightInner write FEyeRightInner;
    property eyeRightOuter: TEyeRightOuterClass read FEyeRightOuter write FEyeRightOuter;
    property eyeRightTop: TEyeRightTopClass read FEyeRightTop write FEyeRightTop;
    property eyebrowLeftInner: TEyebrowLeftInnerClass read FEyebrowLeftInner write FEyebrowLeftInner;
    property eyebrowLeftOuter: TEyebrowLeftOuterClass read FEyebrowLeftOuter write FEyebrowLeftOuter;
    property eyebrowRightInner: TEyebrowRightInnerClass read FEyebrowRightInner write FEyebrowRightInner;
    property eyebrowRightOuter: TEyebrowRightOuterClass read FEyebrowRightOuter write FEyebrowRightOuter;
    property mouthLeft: TMouthLeftClass read FMouthLeft write FMouthLeft;
    property mouthRight: TMouthRightClass read FMouthRight write FMouthRight;
    property noseLeftAlarOutTip: TNoseLeftAlarOutTipClass read FNoseLeftAlarOutTip write FNoseLeftAlarOutTip;
    property noseLeftAlarTop: TNoseLeftAlarTopClass read FNoseLeftAlarTop write FNoseLeftAlarTop;
    property noseRightAlarOutTip: TNoseRightAlarOutTipClass read FNoseRightAlarOutTip write FNoseRightAlarOutTip;
    property noseRightAlarTop: TNoseRightAlarTopClass read FNoseRightAlarTop write FNoseRightAlarTop;
    property noseRootLeft: TNoseRootLeftClass read FNoseRootLeft write FNoseRootLeft;
    property noseRootRight: TNoseRootRightClass read FNoseRootRight write FNoseRootRight;
    property noseTip: TNoseTipClass read FNoseTip write FNoseTip;
    property pupilLeft: TPupilLeftClass read FPupilLeft write FPupilLeft;
    property pupilRight: TPupilRightClass read FPupilRight write FPupilRight;
    property underLipBottom: TUnderLipBottomClass read FUnderLipBottom write FUnderLipBottom;
    property underLipTop: TUnderLipTopClass read FUnderLipTop write FUnderLipTop;
    property upperLipBottom: TUpperLipBottomClass read FUpperLipBottom write FUpperLipBottom;
    property upperLipTop: TUpperLipTopClass read FUpperLipTop write FUpperLipTop;
    constructor Create;
    destructor Destroy; override;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TFaceLandmarksClass;
  end;

  TFaceRectangleClass = class
  private
    FHeight: Extended;
    FLeft: Extended;
    FTop: Extended;
    FWidth: Extended;
  public
    property height: Extended read FHeight write FHeight;
    property left: Extended read FLeft write FLeft;
    property top: Extended read FTop write FTop;
    property width: Extended read FWidth write FWidth;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TFaceRectangleClass;
  end;

  TFacesClass = class
  private
    FFaceLandmarks: TFaceLandmarksClass;
    FFaceRectangle: TFaceRectangleClass;
  public
    property faceLandmarks: TFaceLandmarksClass read FFaceLandmarks write FFaceLandmarks;
    property faceRectangle: TFaceRectangleClass read FFaceRectangle write FFaceRectangle;
    constructor Create;
    destructor Destroy; override;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TFacesClass;
  end;

  TMicrosoftFaceClass = class
  private
    FItems: TArray<TFacesClass>;
  public
    property Items: TArray<TFacesClass> read FItems write FItems;
    destructor Destroy; override;
    function ToJsonString: string;
    class function FromJsonString(const AJsonString: string): TMicrosoftFaceClass;
  end;

implementation

{TUnderLipBottomClass}


function TUnderLipBottomClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TUnderLipBottomClass.FromJsonString(const AJsonString: string): TUnderLipBottomClass;
begin
  result := TJson.JsonToObject<TUnderLipBottomClass>(AJsonString)
end;

{TUnderLipTopClass}


function TUnderLipTopClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TUnderLipTopClass.FromJsonString(const AJsonString: string): TUnderLipTopClass;
begin
  result := TJson.JsonToObject<TUnderLipTopClass>(AJsonString)
end;

{TUpperLipBottomClass}


function TUpperLipBottomClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TUpperLipBottomClass.FromJsonString(const AJsonString: string): TUpperLipBottomClass;
begin
  result := TJson.JsonToObject<TUpperLipBottomClass>(AJsonString)
end;

{TUpperLipTopClass}


function TUpperLipTopClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TUpperLipTopClass.FromJsonString(const AJsonString: string): TUpperLipTopClass;
begin
  result := TJson.JsonToObject<TUpperLipTopClass>(AJsonString)
end;

{TNoseRightAlarOutTipClass}


function TNoseRightAlarOutTipClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TNoseRightAlarOutTipClass.FromJsonString(const AJsonString: string): TNoseRightAlarOutTipClass;
begin
  result := TJson.JsonToObject<TNoseRightAlarOutTipClass>(AJsonString)
end;

{TNoseLeftAlarOutTipClass}


function TNoseLeftAlarOutTipClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TNoseLeftAlarOutTipClass.FromJsonString(const AJsonString: string): TNoseLeftAlarOutTipClass;
begin
  result := TJson.JsonToObject<TNoseLeftAlarOutTipClass>(AJsonString)
end;

{TNoseRightAlarTopClass}


function TNoseRightAlarTopClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TNoseRightAlarTopClass.FromJsonString(const AJsonString: string): TNoseRightAlarTopClass;
begin
  result := TJson.JsonToObject<TNoseRightAlarTopClass>(AJsonString)
end;

{TNoseLeftAlarTopClass}


function TNoseLeftAlarTopClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TNoseLeftAlarTopClass.FromJsonString(const AJsonString: string): TNoseLeftAlarTopClass;
begin
  result := TJson.JsonToObject<TNoseLeftAlarTopClass>(AJsonString)
end;

{TNoseRootRightClass}


function TNoseRootRightClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TNoseRootRightClass.FromJsonString(const AJsonString: string): TNoseRootRightClass;
begin
  result := TJson.JsonToObject<TNoseRootRightClass>(AJsonString)
end;

{TNoseRootLeftClass}


function TNoseRootLeftClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TNoseRootLeftClass.FromJsonString(const AJsonString: string): TNoseRootLeftClass;
begin
  result := TJson.JsonToObject<TNoseRootLeftClass>(AJsonString)
end;

{TEyeRightOuterClass}


function TEyeRightOuterClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TEyeRightOuterClass.FromJsonString(const AJsonString: string): TEyeRightOuterClass;
begin
  result := TJson.JsonToObject<TEyeRightOuterClass>(AJsonString)
end;

{TEyeRightBottomClass}


function TEyeRightBottomClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TEyeRightBottomClass.FromJsonString(const AJsonString: string): TEyeRightBottomClass;
begin
  result := TJson.JsonToObject<TEyeRightBottomClass>(AJsonString)
end;

{TEyeRightTopClass}


function TEyeRightTopClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TEyeRightTopClass.FromJsonString(const AJsonString: string): TEyeRightTopClass;
begin
  result := TJson.JsonToObject<TEyeRightTopClass>(AJsonString)
end;

{TEyeRightInnerClass}


function TEyeRightInnerClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TEyeRightInnerClass.FromJsonString(const AJsonString: string): TEyeRightInnerClass;
begin
  result := TJson.JsonToObject<TEyeRightInnerClass>(AJsonString)
end;

{TEyebrowRightOuterClass}


function TEyebrowRightOuterClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TEyebrowRightOuterClass.FromJsonString(const AJsonString: string): TEyebrowRightOuterClass;
begin
  result := TJson.JsonToObject<TEyebrowRightOuterClass>(AJsonString)
end;

{TEyebrowRightInnerClass}


function TEyebrowRightInnerClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TEyebrowRightInnerClass.FromJsonString(const AJsonString: string): TEyebrowRightInnerClass;
begin
  result := TJson.JsonToObject<TEyebrowRightInnerClass>(AJsonString)
end;

{TEyeLeftInnerClass}


function TEyeLeftInnerClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TEyeLeftInnerClass.FromJsonString(const AJsonString: string): TEyeLeftInnerClass;
begin
  result := TJson.JsonToObject<TEyeLeftInnerClass>(AJsonString)
end;

{TEyeLeftBottomClass}


function TEyeLeftBottomClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TEyeLeftBottomClass.FromJsonString(const AJsonString: string): TEyeLeftBottomClass;
begin
  result := TJson.JsonToObject<TEyeLeftBottomClass>(AJsonString)
end;

{TEyeLeftTopClass}


function TEyeLeftTopClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TEyeLeftTopClass.FromJsonString(const AJsonString: string): TEyeLeftTopClass;
begin
  result := TJson.JsonToObject<TEyeLeftTopClass>(AJsonString)
end;

{TEyeLeftOuterClass}


function TEyeLeftOuterClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TEyeLeftOuterClass.FromJsonString(const AJsonString: string): TEyeLeftOuterClass;
begin
  result := TJson.JsonToObject<TEyeLeftOuterClass>(AJsonString)
end;

{TEyebrowLeftInnerClass}


function TEyebrowLeftInnerClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TEyebrowLeftInnerClass.FromJsonString(const AJsonString: string): TEyebrowLeftInnerClass;
begin
  result := TJson.JsonToObject<TEyebrowLeftInnerClass>(AJsonString)
end;

{TEyebrowLeftOuterClass}


function TEyebrowLeftOuterClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TEyebrowLeftOuterClass.FromJsonString(const AJsonString: string): TEyebrowLeftOuterClass;
begin
  result := TJson.JsonToObject<TEyebrowLeftOuterClass>(AJsonString)
end;

{TMouthRightClass}


function TMouthRightClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TMouthRightClass.FromJsonString(const AJsonString: string): TMouthRightClass;
begin
  result := TJson.JsonToObject<TMouthRightClass>(AJsonString)
end;

{TMouthLeftClass}


function TMouthLeftClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TMouthLeftClass.FromJsonString(const AJsonString: string): TMouthLeftClass;
begin
  result := TJson.JsonToObject<TMouthLeftClass>(AJsonString)
end;

{TNoseTipClass}


function TNoseTipClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TNoseTipClass.FromJsonString(const AJsonString: string): TNoseTipClass;
begin
  result := TJson.JsonToObject<TNoseTipClass>(AJsonString)
end;

{TPupilRightClass}


function TPupilRightClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TPupilRightClass.FromJsonString(const AJsonString: string): TPupilRightClass;
begin
  result := TJson.JsonToObject<TPupilRightClass>(AJsonString)
end;

{TPupilLeftClass}


function TPupilLeftClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TPupilLeftClass.FromJsonString(const AJsonString: string): TPupilLeftClass;
begin
  result := TJson.JsonToObject<TPupilLeftClass>(AJsonString)
end;

{TFaceLandmarksClass}

constructor TFaceLandmarksClass.Create;
begin
  inherited;
  FPupilLeft := TPupilLeftClass.Create();
  FPupilRight := TPupilRightClass.Create();
  FNoseTip := TNoseTipClass.Create();
  FMouthLeft := TMouthLeftClass.Create();
  FMouthRight := TMouthRightClass.Create();
  FEyebrowLeftOuter := TEyebrowLeftOuterClass.Create();
  FEyebrowLeftInner := TEyebrowLeftInnerClass.Create();
  FEyeLeftOuter := TEyeLeftOuterClass.Create();
  FEyeLeftTop := TEyeLeftTopClass.Create();
  FEyeLeftBottom := TEyeLeftBottomClass.Create();
  FEyeLeftInner := TEyeLeftInnerClass.Create();
  FEyebrowRightInner := TEyebrowRightInnerClass.Create();
  FEyebrowRightOuter := TEyebrowRightOuterClass.Create();
  FEyeRightInner := TEyeRightInnerClass.Create();
  FEyeRightTop := TEyeRightTopClass.Create();
  FEyeRightBottom := TEyeRightBottomClass.Create();
  FEyeRightOuter := TEyeRightOuterClass.Create();
  FNoseRootLeft := TNoseRootLeftClass.Create();
  FNoseRootRight := TNoseRootRightClass.Create();
  FNoseLeftAlarTop := TNoseLeftAlarTopClass.Create();
  FNoseRightAlarTop := TNoseRightAlarTopClass.Create();
  FNoseLeftAlarOutTip := TNoseLeftAlarOutTipClass.Create();
  FNoseRightAlarOutTip := TNoseRightAlarOutTipClass.Create();
  FUpperLipTop := TUpperLipTopClass.Create();
  FUpperLipBottom := TUpperLipBottomClass.Create();
  FUnderLipTop := TUnderLipTopClass.Create();
  FUnderLipBottom := TUnderLipBottomClass.Create();
end;

destructor TFaceLandmarksClass.Destroy;
begin
  FPupilLeft.free;
  FPupilRight.free;
  FNoseTip.free;
  FMouthLeft.free;
  FMouthRight.free;
  FEyebrowLeftOuter.free;
  FEyebrowLeftInner.free;
  FEyeLeftOuter.free;
  FEyeLeftTop.free;
  FEyeLeftBottom.free;
  FEyeLeftInner.free;
  FEyebrowRightInner.free;
  FEyebrowRightOuter.free;
  FEyeRightInner.free;
  FEyeRightTop.free;
  FEyeRightBottom.free;
  FEyeRightOuter.free;
  FNoseRootLeft.free;
  FNoseRootRight.free;
  FNoseLeftAlarTop.free;
  FNoseRightAlarTop.free;
  FNoseLeftAlarOutTip.free;
  FNoseRightAlarOutTip.free;
  FUpperLipTop.free;
  FUpperLipBottom.free;
  FUnderLipTop.free;
  FUnderLipBottom.free;
  inherited;
end;

function TFaceLandmarksClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TFaceLandmarksClass.FromJsonString(const AJsonString: string): TFaceLandmarksClass;
begin
  result := TJson.JsonToObject<TFaceLandmarksClass>(AJsonString)
end;

{TFaceRectangleClass}


function TFaceRectangleClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TFaceRectangleClass.FromJsonString(const AJsonString: string): TFaceRectangleClass;
begin
  result := TJson.JsonToObject<TFaceRectangleClass>(AJsonString)
end;

{TFacesClass}

constructor TFacesClass.Create;
begin
  inherited;
  FFaceRectangle := TFaceRectangleClass.Create();
  FFaceLandmarks := TFaceLandmarksClass.Create();
end;

destructor TFacesClass.Destroy;
begin
  FFaceRectangle.free;
  FFaceLandmarks.free;
  inherited;
end;

function TFacesClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TFacesClass.FromJsonString(const AJsonString: string): TFacesClass;
begin
  result := TJson.JsonToObject<TFacesClass>(AJsonString)
end;

{TRootClass}

destructor TMicrosoftFaceClass.Destroy;
var
  LItemsItem: TFacesClass;
begin

 for LItemsItem in FItems do
   LItemsItem.free;

  inherited;
end;

function TMicrosoftFaceClass.ToJsonString: string;
begin
  Result := TJson.ObjectToJsonString(self);
end;

class function TMicrosoftFaceClass.FromJsonString(const AJsonString: string): TMicrosoftFaceClass;
var
  jsonArray : TJSONArray;
  i: Integer;
begin
  jsonArray := TJSONObject.ParseJSONValue(AJsonString) as TJSONArray;
  Result := TMicrosoftFaceClass.Create;
  SetLength(Result.FItems, jsonArray.Count);
  for i := 0 to jsonArray.Count -1 do
  begin
    Result.FItems[i] := TFacesClass.FromJsonString(jsonArray[i].ToJSON);
  end;
//  result := TJson.JsonToObject<TMicrosoftFaceClass>('{ ''items'' : ' + AJsonString + '}');
end;

end.
